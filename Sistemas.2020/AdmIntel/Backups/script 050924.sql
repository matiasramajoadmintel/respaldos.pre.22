CREATE GENERATOR GR_PERSONAL;

CREATE TABLE PERSONAL
(
  IDPERSONAL	INTEGER NOT NULL,
  NOMBRE	VARCHAR(25) NOT NULL,
  APELLIDO	VARCHAR(15) NOT NULL,
  MATRICULA	VARCHAR(8) NOT NULL,
  IDGRADO       INTEGER NOT NULL,
CONSTRAINT PERSONAL_PK PRIMARY KEY (IDPERSONAL),
 FOREIGN KEY(IDGRADO) REFERENCES GRADO(IDGRADO)
);
SET TERM ^ ;


/* Triggers only will work for SQL triggers */

CREATE TRIGGER AUTOENUMPERSONAL FOR PERSONAL
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
 NEW.IdPersonal=GEN_ID(GR_PERSONAL,1);
END
 ^

COMMIT WORK ^
SET TERM ;^


DROP PROCEDURE SP_GET_GENID;

COMMIT WORK;
SET AUTODDL OFF;
SET TERM ^ ;

/* Stored procedures */

CREATE PROCEDURE SP_GET_GENID
(
  NOMBRE_GEN VARCHAR(20)
)
RETURNS
(
  GENID INTEGER
)
AS
BEGIN EXIT; END ^


ALTER PROCEDURE SP_GET_GENID
(
  NOMBRE_GEN VARCHAR(20)
)
RETURNS
(
  GENID INTEGER
)
AS
BEGIN
  IF (NOMBRE_GEN = 'IDMATERIAL') THEN GENID = GEN_ID(GEN_IDMATERIAL,0);
  ELSE IF (NOMBRE_GEN = 'IDPROVEEDOR') THEN GENID =
GEN_ID(GEN_IDPROVEEDOR,0);
  ELSE IF (NOMBRE_GEN = 'IDTRABAJO') THEN GENID =
GEN_ID(GEN_IDTRABAJO,0);
  ELSE IF (NOMBRE_GEN = 'IDGASTO_AD') THEN GENID =
GEN_ID(GEN_IDGASTO_AD,0);
  ELSE IF (NOMBRE_GEN = 'IDGASTO_FI') THEN GENID =
GEN_ID(GEN_IDGASTO_FI,0);
  ELSE IF (NOMBRE_GEN = 'IDSERV_EDIF') THEN GENID =
GEN_ID(GEN_IDSERV_EDIF,0);
  ELSE IF (NOMBRE_GEN = 'IDTEMP_PAGOS') THEN GENID =
GEN_ID(GEN_IDTEMP_PAGOS,0);
  ELSE IF (NOMBRE_GEN = 'IDPAGO') THEN GENID =
GEN_ID(GEN_IDPAGO,0);
  ELSE IF (NOMBRE_GEN = 'IDINGRESO') THEN GENID =
GEN_ID(GEN_IDINGRESO,0);
  ELSE IF (NOMBRE_GEN = 'IDRECIBO_ANULADO') THEN GENID =
GEN_ID(GEN_IDRECIBO_ANULADO,0);
  ELSE IF (NOMBRE_GEN = 'IDPERSONA') THEN GENID =
GEN_ID(GR_PERSONA,0);
ELSE IF (NOMBRE_GEN = 'IDDEPARTAMENTO') THEN GENID =
GEN_ID(GR_DEPARTAMENTO,0);
ELSE IF (NOMBRE_GEN = 'IDPERSONAL') THEN GENID =
GEN_ID(GR_PERSONAL,0);
  EXIT;
END
 ^

SET TERM ; ^
COMMIT WORK;
SET AUTODDL ON;

ALTER TABLE PAGO ADD IDPERSONAL INTEGER;

DROP VIEW VW_CHEQUES_NO_COBRADOS;

DROP VIEW VW_CHEQUES_DEVUELTOS;

DROP VIEW VW_PAGADOS;

CREATE VIEW VW_PAGADOS (
  IDPROVEEDOR,
  FECHA_PAGO,
  IMPORTE,
  TIPO_PAGO,
  NRO_CHEQUE,
  COBRADO,
  IDPAGO,
  RAZON_SOCIAL,
  PERSONAL
) AS

SELECT Vw_pago_prov_SINFACT.IDPROVEEDOR, Pago.FECHA_PAGO, Pago.IMPORTE, Pago.TIPO_PAGO, Pago.NRO_CHEQUE, Pago.COBRADO, Pago.IDPAGO, Proveedor.RAZON_SOCIAL, Personal.APELLIDO ||', '|| Personal.NOMBRE
FROM PAGO Pago
   INNER JOIN VW_PAGO_PROV_SINFACT Vw_pago_prov_SINFACT
   ON  (Pago.IDPAGO = Vw_pago_prov_SINFACT.IDPAGO)
   LEFT OUTER JOIN PERSONAL Personal
   ON  (Pago.IDPERSONAL = Personal.IDPERSONAL)
   INNER JOIN PROVEEDOR Proveedor
   ON  (Vw_pago_prov_SINFACT.IDPROVEEDOR = Proveedor.IDPROVEEDOR)

;

CREATE VIEW VW_CHEQUES_DEVUELTOS (
  FECHA_PAGO, 
  NRO_CHEQUE, 
  PROVEEDOR, 
  IMPORTE, 
  TIPO
) AS

SELECT Vw_pagados.FECHA_PAGO, Cheque_devuelto.NRO_CHEQUE, Vw_pagados.RAZON_SOCIAL, Vw_pagados.IMPORTE, Cheque_devuelto.TIPO
FROM CHEQUE_DEVUELTO Cheque_devuelto
   INNER JOIN VW_PAGADOS Vw_pagados
   ON  (Vw_pagados.NRO_CHEQUE = Cheque_devuelto.NRO_CHEQUE)
;

CREATE VIEW VW_CHEQUES_NO_COBRADOS (
  NRO_CHEQUE, 
  FECHA_PAGO, 
  PROVEEDOR, 
  IMPORTE
) AS

SELECT VW_PAGADOS.NRO_CHEQUE, VW_PAGADOS.FECHA_PAGO, VW_PAGADOS.RAZON_SOCIAL, VW_PAGADOS.IMPORTE
FROM VW_PAGADOS
WHERE  VW_PAGADOS.COBRADO = 'No'
;

