unit ElecEnt;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  Grids, DBGrids, StdCtrls, Db, DBTables, ExtCtrls, Buttons;

type
  TfrmElecEnt = class(TForm)
    Query1: TQuery;
    DataSource1: TDataSource;
    Panel1: TPanel;
    Panel2: TPanel;
    DBGrid1: TDBGrid;
    Query1Descrip: TStringField;
    qryUpdate: TQuery;
    Panel3: TPanel;
    btnAgregar: TButton;
    btnEliminar: TButton;
    btnModificar: TButton;
    Panel4: TPanel;
    btnCancelar: TBitBtn;
    btnElegir: TBitBtn;
    procedure DBGrid1DblClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnAgregarClick(Sender: TObject);
    procedure btnEliminarClick(Sender: TObject);
    procedure btnModificarClick(Sender: TObject);
    procedure ControlKeyPress(Sender: TObject; var Key: Char);

  private
    Tabla, Titulo: String;
    gModo: Byte; //0: Consulta, 1: Muestra, 2: Eleccion
    Procedure PrepararQuery(const Modo: Byte);
    Procedure PrepararForm(const Modo: Byte);
    function RetornarClave:Integer;

  public
    function getId(const T: String;var Id: Word): Boolean;
    function getEnt(const T: String; var Id: Real; var Desc: String): Boolean;
    Procedure Mostrar(const T: String);
    Procedure Consultar(const T: String);

  end;

var
  frmElecEnt: TfrmElecEnt;

implementation

uses Util, Comunes, Input, StoredProcs, DataBases;

{$R *.DFM}


{***************************  PUBLICOS  ***************************************}

function TfrmElecEnt.getId(const T: String;var Id: Word): Boolean;
begin
     Result := False;
     Tabla := T;
     PrepararForm(2);

     ShowModal;

     Result := (ModalResult=mrOk);
     if Result then Id := RetornarClave;
     Query1.Close;
end;

function TfrmElecEnt.getEnt(const T: String; var Id: Real; var Desc: String): Boolean;
begin
     Result := False;
     Tabla := T;
     PrepararForm(2);

     ShowModal;

     Result := (ModalResult=mrOk);
     if Result then
     begin
          Id := RetornarClave;
          Desc := Query1Descrip.Text;
     end;
     Query1.Close;
end;

Procedure TfrmElecEnt.Mostrar(const T: String);
begin
     Tabla := T;
     PrepararForm(1);
     btnAgregar.Enabled := True;

     ShowModal;

     Query1.Close;
end;

Procedure TfrmElecEnt.Consultar(const T: String);
begin
     Tabla := T;
     PrepararForm(0);
     btnAgregar.Enabled := False;
     btnModificar.Enabled := False;
     btnEliminar.Enabled := False;

     ShowModal;

     Query1.Close;
end;

{***************************  PRIVADOS  ***************************************}

Procedure TfrmElecEnt.PrepararQuery(const Modo: Byte);
var
   Script: String;
begin
     Script := 'SELECT * FROM dbo.'+ Tabla;
     with Query1 do
     begin
          Close;
          SQL.Clear;
          SQL.Add(Script);
          SQL.Add(' ORDER BY Descrip');
          Open;
          btnAgregar.Enabled := (Modo<>0);
          btnEliminar.Enabled := (Modo<>0)and(RecordCount>0);
          btnModificar.Enabled := (Modo<>0)and(RecordCount>0);
          btnElegir.Visible := (Modo=2)and(RecordCount>0);
     end;
end;

Procedure TfrmElecEnt.PrepararForm(const Modo: Byte);
begin
     gModo := Modo;
     PrepararQuery(Modo);

     if Tabla = 'TipoObra' then Titulo := 'Tipos de obra'
     else if Tabla = 'Banco' then Titulo := 'Bancos'
     else if Tabla = 'Rubro' then Titulo := 'Rubros'
     else if Tabla = 'Tarea' then Titulo := 'Tareas secundarias'
     else if Tabla = 'Trabajo' then Titulo := 'Tareas principales';

     Caption := 'Listado de ' + Titulo;
     DBGrid1.Columns[0].Title.Caption := Titulo;
end;

{***************************  EVENTOS *****************************************}

procedure TfrmElecEnt.DBGrid1DblClick(Sender: TObject);
begin
  ModalResult := mrOk;
end;

procedure TfrmElecEnt.btnCancelarClick(Sender: TObject);
begin
  Query1.Close;
end;

procedure TfrmElecEnt.btnAgregarClick(Sender: TObject);
var
   Consulta, T: String;
begin
     T := '';
     if not IngresarTexto(T,Titulo) then Exit;

     Consulta := 'INSERT INTO dbo.'+ Tabla +' (Descrip) VALUES ('+#39+T+#39+')';

  try
    with  qryUpdate do
    begin
      Close;
      SQL.Clear;
      SQL.Add(Consulta);
      Prepare;
      ExecSQL;
    end;
    except on EDatabaseError do
      MsjError('Se produjo un error al intentar actualizar. Compruebe que los '+
               'datos están completos y que no hay descripciones repetidas.');
  end;

     Query1.Close;
     Existe(Query1,'Descrip',T);
     btnEliminar.Enabled := (Query1.RecordCount>0);
     btnModificar.Enabled := (Query1.RecordCount>0);
     btnElegir.Visible := (gModo=2)and(Query1.RecordCount>0);
end;

procedure TfrmElecEnt.btnEliminarClick(Sender: TObject);
var
   Consulta: String;
begin
     if not Confirmar('¿Esta seguro de eliminar el ìtem elegido?') then Exit;

     Consulta := 'DELETE FROM dbo.'+ Tabla +' WHERE Descrip=' +
                 #39+Query1Descrip.Text+#39;

  try
    with  qryUpdate do
    begin
      Close;
      SQL.Clear;
      SQL.Add(Consulta);
      Prepare;
      ExecSQL;
    end;
    except on EDatabaseError do
      MsjError('Se produjo un error al intentar eliminar. Compruebe que el '+
               'dato que desea eliminar no esté siendo uasado.');
  end;

     Query1.Close;
     Query1.Open;
     btnEliminar.Enabled := (Query1.RecordCount>0);
     btnModificar.Enabled := (Query1.RecordCount>0);
     btnElegir.Visible := (gModo=2)and(Query1.RecordCount>0);
end;

procedure TfrmElecEnt.btnModificarClick(Sender: TObject);
var
   Consulta, T: String;
begin
     T := Query1Descrip.Text;
     if not IngresarTexto(T,Titulo) then Exit;

     Consulta := 'UPDATE dbo.' + Tabla + ' SET Descrip =' + #39 + T + #39 +
                 ' WHERE Descrip =' + #39 + Query1Descrip.Text + #39;

  try
    with  qryUpdate do
    begin
      Close;
      SQL.Clear;
      SQL.Add(Consulta);
      Prepare;
      ExecSQL;
    end;
    except on EDatabaseError do
      MsjError('Se produjo un error al intentar actualizar. Compruebe que los '+
               'datos están completos y que no hay descripciones repetidas.');
  end;

     Query1.Close;
     Existe(Query1,'Descrip',T);
     btnEliminar.Enabled := (Query1.RecordCount>0);
     btnModificar.Enabled := (Query1.RecordCount>0);
end;

function TfrmElecEnt.RetornarClave:Integer;
var
  SP: TStoredProc;
begin
  Result := -1;

  with dmStoredProcs.spGetId do
  begin
    StoredProcName := 'spGetId' + Tabla;
    {if Tabla = 'FliaEquipo' then StoredProcName := 'spGetIdFliaEquipo'
    else if Tabla = 'Marca' then StoredProcName := 'spGetIdMarca'
    else if Tabla = 'SistTecnico' then StoredProcName := 'spGetIdSistTecnico'
    else if Tabla = 'TipoUnidad' then StoredProcName := 'spGetIdTipoUnidad'
    else if Tabla = 'TipoEstudio' then StoredProcName := 'spGetIdTipoEstudio'
    else if Tabla = 'SubTipoEquipo' then StoredProcName := 'spGetIdSubTipoEquipo'
    else if Tabla = 'AreaTrabajo' then StoredProcName := 'spGetIdAreaTrabajo';
    if Tabla = 'Ubicacion' then StoredProcName := 'spGetIdUbicacion';
    if Tabla = 'EfectoFalla' then StoredProcName := 'spGetIdEfectoFalla';
    if Tabla = 'TrabajoCorrectivo' then StoredProcName := 'spGetIdTrabCtvo';
    if Tabla = 'CausaAdelanto' then StoredProcName := 'spGetIdCausaAdelanto';
    if Tabla = 'CausaSusp' then StoredProcName := 'spGetIdCausaSusp';
    if Tabla = 'ModoFalla' then StoredProcName := 'spGetIdModoFalla';
    if Tabla = 'CausaFalla' then StoredProcName := 'spGetIdCausaFalla';
    if Tabla = 'ParteEquipo' then StoredProcName := 'spGetIdParteEquipo';}

    Close;
    {Elimina los parametros anteriores}
    while Params.Count <> 0 do
      Params.RemoveParam(Params[0]);
    {Agrega el parametro @Descrip y le pasa el texto}
    with Params.CreateParam(ftString,'@Descrip',ptInput) do
      AsString := Query1Descrip.Text;
    {Agrega el parámetro donde devolverá el resultado}
    Params.CreateParam(ftInteger,'@Id',ptInputOutput);
    {Prepara el SP y lo ejecuta}
    Prepare;
    ExecProc;
    Result := ParamByName('@Id').AsInteger;
  end;
end;

procedure TfrmElecEnt.ControlKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = '+' then btnAgregarClick(nil)
  else if Key = '-' then btnEliminarClick(nil)
  else if Key = '*' then btnModificarClick(nil);
end;

end.
